---
---

<mode-toggle transition:persist class="flex">
	<button
		class="justify-self-end bg-black dark:bg-white ml-4 inline-flex h-6 w-11 items-center rounded-full"
		id="mode-toggle"
		role="switch"
		type="button"
		tabindex="0"
		aria-checked="false"
		data-headlessui-state=""
		><span class="sr-only">Toggle dark mode</span><span
			id="mode-circle"
			class="light inline-block h-4 w-4 rounded-full bg-gradient-to-tr invisible"
			><span
				class="absolute top-0 right-0 w-[10px] h-[10px] rounded-full bg-white scale-[0]"
			></span>
		</span>
	</button>
</mode-toggle>

<script>
	import { updateHtmlTheme, updateModeCircle, darkMode } from "../lib/store";

	class ModeToggle extends HTMLElement {
		private toggleButton = this.querySelector("button") as HTMLElement;
		private iconElement = this.toggleButton.querySelector(
			"#mode-circle"
		) as HTMLElement;

		private toggleVisibility(element: HTMLElement) {
			if (!element.classList.contains("duration-300")) {
				element.classList.add("duration-300");
			}
		}

		private initializeButton(element: HTMLElement) {
			if (element) {
				element.classList.toggle("light", darkMode.get());
				element.classList.toggle("dark", !darkMode.get());
				if (element.classList.contains("invisible")) {
					element.classList.remove("invisible");
				}
			}
		}

		constructor() {
			super();
			let currentMode = darkMode.get();

			this.initializeButton(this.iconElement);
			this.toggleButton.addEventListener("click", () => {
				darkMode.set(!currentMode);
				sessionStorage.setItem("darkMode", String(currentMode));
				updateHtmlTheme;
				updateModeCircle;
				this.toggleVisibility(this.iconElement);
			});
		}
	}

	customElements.define("mode-toggle", ModeToggle);
</script>

<style>
	.light {
		transform: translateX(0.25rem);
		background-color: white;
	}
	.dark {
		transform: translateX(1.5rem);
		background-color: black;
	}
</style>
